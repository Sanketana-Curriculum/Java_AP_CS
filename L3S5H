public class Pizza {

  private String size;
  private String crust;
  private String[] toppings; // Using simple array instead of ArrayList

  // Overloaded constructors
  public Pizza() {
    this.size = "Medium";
    this.crust = "Regular";
    this.toppings = new String[3]; // Initialize toppings array with size 3
  }

  public Pizza(String size) {
    this.size = size;
    this.crust = "Regular";
    this.toppings = new String[3]; // Initialize toppings array with size 3
  }

  public Pizza(String size, String crust) {
    this.size = size;
    this.crust = crust;
    this.toppings = new String[3]; // Initialize toppings array with size 3
  }

  // Setters and getters

  // Add topping method
  public void addTopping(String topping) {
    // Find the first available index in toppings array
    int index = 0;
    while (index < toppings.length && toppings[index] != null) {
      index++;
    }
    // If toppings array is full, increase its size by 3
    if (index == toppings.length) {
      String[] newToppings = new String[toppings.length + 3];
      // Copy existing toppings to the new array
      System.arraycopy(toppings, 0, newToppings, 0, toppings.length);
      toppings = newToppings;
    }
    // Add the topping to the toppings array
    toppings[index] = topping;
  }

  // Order summary method
  public void printOrder() {
    // Print order details
    System.out.println("Pizza Order:");
    System.out.println("Size: " + size);
    System.out.println("Crust: " + crust);
    System.out.println("Toppings:");
    for (String topping : toppings) {
      if (topping != null) {
        System.out.println("- " + topping);
      }
    }
    System.out.println();
  }
  
}


public class PizzaApp {

  public static void main(String[] args) {
    
    // Create pizzas using different constructors
    Pizza p1 = new Pizza();
    Pizza p2 = new Pizza("Large");
    Pizza p3 = new Pizza("Small", "Thin Crust");

    // Add toppings
    p1.addTopping("Pepperoni");
    p2.addTopping("Mushrooms");

    // Print orders
    p1.printOrder();
    p2.printOrder();
    p3.printOrder();

  }

}
