// Node class represents a single node in the circular linked list
class Node {
    int data; // Data stored in the node
    Node next; // Reference to the next node in the list

    // Constructor to create a new node with given data
    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

// CircularLinkedList class represents the circular linked list and its operations
class CircularLinkedList {
    Node head; // Reference to the head of the list

    // Constructor to initialize an empty list
    public CircularLinkedList() {
        this.head = null;
    }

    // Method to insert a new node at the beginning of the list
    public void insertAtBeginning(int data) {
        Node newNode = new Node(data); // Create a new node
        if (head == null) { // If list is empty, set head to the new node
            head = newNode;
            head.next = head; // Make it point to itself
        } else {
            // Traverse to the last node and update its next pointer to the new node
            Node last = head;
            while (last.next != head) {
                last = last.next;
            }
            last.next = newNode;
            newNode.next = head; // Make the new node point to the head
            head = newNode; // Update head to the new node
        }
    }

    // Method to insert a new node at the end of the list
    public void insertAtEnd(int data) {
        Node newNode = new Node(data); // Create a new node
        if (head == null) { // If list is empty, set head to the new node
            head = newNode;
            head.next = head; // Make it point to itself
        } else {
            // Traverse to the last node and update its next pointer to the new node
            Node last = head;
            while (last.next != head) {
                last = last.next;
            }
            last.next = newNode;
            newNode.next = head; // Make the new node point to the head
        }
    }

    // Method to delete a node with given data from the list
    public void delete(int key) {
        if (head == null) // If list is empty, do nothing
            return;

        Node curr = head, prev = null;

        // If head node itself holds the key to be deleted
        if (curr.data == key && curr.next == head) {
            prev = curr;
            while (prev.next != head)
                prev = prev.next;
            head = head.next;
            prev.next = head;
            return;
        }

        // Search for the key to be deleted, keep track of the previous node
        do {
            prev = curr;
            curr = curr.next;
        } while (curr != head && curr.data != key);

        // If key was not present in the list
        if (curr == head)
            return;

        // Unlink the node from the list
        prev.next = curr.next;
    }

    // Method to display all elements of the list
    public void display() {
        if (head == null) {
            System.out.println("List is empty");
            return;
        }

        Node temp = head;
        do {
            System.out.print(temp.data + " ");
            temp = temp.next;
        } while (temp != head);
        System.out.println();
    }

    // Method to search for a given key in the list
    public boolean search(int key) {
        if (head == null) // If list is empty, return false
            return false;

        Node temp = head;
        do {
            if (temp.data == key)
                return true;
            temp = temp.next;
        } while (temp != head);
        return false;
    }
}

// Main class to test the CircularLinkedList
public class Main {
    public static void main(String[] args) {
        CircularLinkedList list = new CircularLinkedList();

        // Insert some elements into the list
        list.insertAtEnd(1);
        list.insertAtEnd(2);
        list.insertAtEnd(3);
        list.insertAtEnd(4);

        // Display the list
        System.out.println("Original List:");
        list.display(); // Output: 1 2 3 4

        // Insert a new node at the beginning
        list.insertAtBeginning(0);

        // Display the list after insertion
        System.out.println("List after inserting at the beginning:");
        list.display(); // Output: 0 1 2 3 4

        // Delete a node from the list
        list.delete(2);

        // Display the list after deletion
        System.out.println("List after deleting a node:");
        list.display(); // Output: 0 1 3 4

        // Search for an element in the list
        int key = 3;
        if (list.search(key))
            System.out.println(key + " is present in the list");
        else
            System.out.println(key + " is not present in the list");
    }
}
