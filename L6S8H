import java.util.LinkedList;
import java.util.Queue;

public class ProducerConsumerProblem {
    // Define the maximum capacity of the buffer
    private static final int BUFFER_SIZE = 5;

    public static void main(String[] args) {
        // Create a shared buffer using a queue
        Queue<Integer> buffer = new LinkedList<>();

        // Create producer and consumer threads
        Thread producer1 = new Thread(new Producer(buffer), "Producer1");
        Thread producer2 = new Thread(new Producer(buffer), "Producer2");
        Thread consumer1 = new Thread(new Consumer(buffer), "Consumer1");
        Thread consumer2 = new Thread(new Consumer(buffer), "Consumer2");

        // Start the threads
        producer1.start();
        producer2.start();
        consumer1.start();
        consumer2.start();
    }
}

// Producer class
class Producer implements Runnable {
    private final Queue<Integer> buffer;

    public Producer(Queue<Integer> buffer) {
        this.buffer = buffer;
    }

    @Override
    public void run() {
        // Produce items and add them to the buffer
        for (int i = 1; i <= 10; i++) {
            synchronized (buffer) {
                // Wait if the buffer is full
                while (buffer.size() == ProducerConsumerProblem.BUFFER_SIZE) {
                    try {
                        System.out.println(Thread.currentThread().getName() + " is waiting. Buffer is full.");
                        buffer.wait();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }

                // Produce an item and add it to the buffer
                System.out.println(Thread.currentThread().getName() + " produced item: " + i);
                buffer.offer(i);

                // Notify consumers that an item is added to the buffer
                buffer.notifyAll();
            }

            // Introduce a delay to simulate production time
            try {
                Thread.sleep((long) (Math.random() * 1000));
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

// Consumer class
class Consumer implements Runnable {
    private final Queue<Integer> buffer;

    public Consumer(Queue<Integer> buffer) {
        this.buffer = buffer;
    }

    @Override
    public void run() {
        // Consume items from the buffer
        while (true) {
            synchronized (buffer) {
                // Wait if the buffer is empty
                while (buffer.isEmpty()) {
                    try {
                        System.out.println(Thread.currentThread().getName() + " is waiting. Buffer is empty.");
                        buffer.wait();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }

                // Consume an item from the buffer
                int item = buffer.poll();
                System.out.println(Thread.currentThread().getName() + " consumed item: " + item);

                // Notify producers that an item is consumed from the buffer
                buffer.notifyAll();
            }

            // Introduce a delay to simulate consumption time
            try {
                Thread.sleep((long) (Math.random() * 1000));
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
