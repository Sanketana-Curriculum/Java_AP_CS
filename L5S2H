class CustomStack {
    private int[] stack;
    private int top;

    public CustomStack(int capacity) {
        stack = new int[capacity];
        top = -1;
    }

    public void push(int item) {
        if (top == stack.length - 1) {
            // Stack is full, handle overflow if needed
            System.out.println("Stack overflow!");
        } else {
            stack[++top] = item;
        }
    }

    public int pop() {
        if (top == -1) {
            // Stack is empty, handle underflow if needed
            System.out.println("Stack underflow!");
            return -1; // Placeholder for underflow handling
        } else {
            return stack[top--];
        }
    }

    public int peek() {
        if (top == -1) {
            // Stack is empty, handle empty stack if needed
            System.out.println("Stack is empty!");
            return -1; // Placeholder for empty stack handling
        } else {
            return stack[top];
        }
    }

    public boolean isEmpty() {
        return top == -1;
    }
}

public class CelebrityFinder {

    // Function to find the celebrity in the party
    static int findCelebrity(int[][] matrix, int n) {
        CustomStack stack = new CustomStack(n);

        // Push all people onto the stack
        for (int i = 0; i < n; i++) {
            stack.push(i);
        }

        // Pop off pairs until only one person remains (potential celebrity)
        while (stack.peek() != -1 && stack.peek() != stack.pop()) {
            int personB = stack.pop();
            int personA = stack.pop();

            // If personA knows personB, personA cannot be the celebrity; push personB
            if (matrix[personA][personB] == 1) {
                stack.push(personB);
            }
            // If personA doesn't know personB, personB cannot be the celebrity; push personA
            else {
                stack.push(personA);
            }
        }

        // Check if the potential celebrity is known to everyone
        int potentialCelebrity = stack.pop();
        for (int i = 0; i < n; i++) {
            if (i != potentialCelebrity && (matrix[potentialCelebrity][i] == 1 || matrix[i][potentialCelebrity] == 0)) {
                // The potential celebrity knows someone or someone doesn't know the potential celebrity
                return -1; // No celebrity found
            }
        }

        return potentialCelebrity;
    }

    public static void main(String[] args) {
        int[][] matrix = {
                {0, 0, 1, 0},
                {0, 0, 1, 0},
                {0, 0, 0, 0},
                {0, 0, 1, 0}
        };

        int n = matrix.length;

        // Find the celebrity
        int celebrityId = findCelebrity(matrix, n);

        // Display the result
        if (celebrityId != -1) {
            System.out.println("Celebrity found with ID: " + celebrityId);
        } else {
            System.out.println("No celebrity found in the party.");
        }
    }
}
