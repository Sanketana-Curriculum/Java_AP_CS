class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

public class LinkedListStack {
    private Node top;

    public LinkedListStack() {
        this.top = null;
    }

    // Push operation to add an element to the top of the stack
    public void push(int data) {
        Node newNode = new Node(data);
        newNode.next = top;
        top = newNode;
        System.out.println(data + " pushed to the stack.");
    }

    // Pop operation to remove and return the element from the top of the stack
    public int pop() {
        if (isEmpty()) {
            System.out.println("Stack underflow!");
            return -1; // Placeholder for underflow handling
        }
        int data = top.data;
        top = top.next;
        System.out.println(data + " popped from the stack.");
        return data;
    }

    // Peek operation to return the element at the top of the stack without removing it
    public int peek() {
        if (isEmpty()) {
            System.out.println("Stack is empty!");
            return -1; // Placeholder for empty stack handling
        }
        return top.data;
    }

    // Check if the stack is empty
    public boolean isEmpty() {
        return top == null;
    }

    public static void main(String[] args) {
        // Create a stack
        LinkedListStack stack = new LinkedListStack();

        // Push elements onto the stack
        stack.push(10);
        stack.push(20);
        stack.push(30);

        // Peek at the top element
        System.out.println("Top element: " + stack.peek());

        // Pop elements from the stack
        stack.pop();
        stack.pop();
        stack.pop();

        // Attempt to pop from an empty stack
        stack.pop();
    }
}
